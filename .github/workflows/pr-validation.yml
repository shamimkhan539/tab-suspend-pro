name: Pull Request Validation

on:
    pull_request:
        branches:
            - master
        types: [opened, synchronize, reopened]

jobs:
    pr-validation:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Calculate next version
              id: version
              run: |
                  # Get all existing tags
                  git fetch --tags

                  # Get the latest tag version
                  LATEST_TAG=$(git tag --list --sort=-version:refname | head -n1)
                  echo "📋 Latest existing tag: $LATEST_TAG"

                  if [ -z "$LATEST_TAG" ]; then
                    # No tags exist, start with v1.0.0
                    NEXT_VERSION="v1.0.0"
                  else
                    # Extract version numbers from latest tag
                    VERSION_NUMBERS=$(echo $LATEST_TAG | sed 's/v//' | tr '.' ' ')
                    read -r MAJOR MINOR PATCH <<< "$VERSION_NUMBERS"
                    
                    # Increment patch version
                    PATCH=$((PATCH + 1))
                    NEXT_VERSION="v$MAJOR.$MINOR.$PATCH"
                  fi

                  echo "🚀 Next version will be: $NEXT_VERSION"
                  echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
                  echo "manifest_version=$(echo $NEXT_VERSION | sed 's/v//')" >> $GITHUB_OUTPUT

            - name: Check version status
              id: version_check
              run: |
                  echo "latest_tag=$(git tag --list --sort=-version:refname | head -n1)" >> $GITHUB_OUTPUT
                  echo "next_version=${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
                  echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

                  if [ "$OLD_VERSION" != "$NEW_VERSION" ]; then
                    echo "version_changed=true" >> $GITHUB_OUTPUT
                    echo "🔄 Version changed: $OLD_VERSION → $NEW_VERSION"
                  else
                    echo "version_changed=false" >> $GITHUB_OUTPUT
                    echo "📋 Version unchanged: $NEW_VERSION"
                  fi

            - name: Validate manifest.json
              run: |
                  echo "🔍 Validating manifest.json..."
                  if ! cat manifest.json | python -m json.tool > /dev/null 2>&1; then
                    echo "❌ manifest.json is not valid JSON"
                    exit 1
                  fi
                  echo "✅ manifest.json is valid JSON"

            - name: Check all required files
              run: |
                  echo "🔍 Checking required files..."
                  required_files=("manifest.json" "background.js" "content.js" "popup.html" "popup.js" "options.html" "options.js" "suspended.html" "suspended.js")
                  missing_files=()

                  for file in "${required_files[@]}"; do
                    if [ ! -f "$file" ]; then
                      missing_files+=("$file")
                      echo "❌ Missing: $file"
                    else
                      echo "✅ Found: $file"
                    fi
                  done

                  if [ ${#missing_files[@]} -gt 0 ]; then
                    echo "❌ Missing required files: ${missing_files[*]}"
                    exit 1
                  fi

            - name: Validate JavaScript syntax
              run: |
                  echo "🔍 Checking JavaScript syntax..."
                  js_files=("background.js" "content.js" "popup.js" "options.js" "suspended.js")
                  syntax_errors=()

                  for file in "${js_files[@]}"; do
                    if ! node -c "$file" 2>/dev/null; then
                      syntax_errors+=("$file")
                      echo "❌ Syntax error in: $file"
                    else
                      echo "✅ Syntax OK: $file"
                    fi
                  done

                  if [ ${#syntax_errors[@]} -gt 0 ]; then
                    echo "❌ JavaScript syntax errors found in: ${syntax_errors[*]}"
                    exit 1
                  fi

            - name: Check icons
              run: |
                  echo "🔍 Checking icon files..."
                  required_icons=("icons/icon16.png" "icons/icon32.png" "icons/icon48.png" "icons/icon128.png")
                  missing_icons=()

                  for icon in "${required_icons[@]}"; do
                    if [ ! -f "$icon" ]; then
                      missing_icons+=("$icon")
                      echo "❌ Missing: $icon"
                    else
                      echo "✅ Found: $icon"
                    fi
                  done

                  if [ ${#missing_icons[@]} -gt 0 ]; then
                    echo "❌ Missing required icons: ${missing_icons[*]}"
                    exit 1
                  fi

            - name: Test build creation
              run: |
                  echo "🔨 Testing build creation..."
                  mkdir -p pr-build-test

                  cp manifest.json pr-build-test/
                  cp *.js pr-build-test/
                  cp *.html pr-build-test/
                  cp -r icons pr-build-test/
                  cp LICENSE pr-build-test/ 2>/dev/null || echo "LICENSE file not found, skipping"

                  echo "✅ Build test successful"

            - name: PR Summary
              run: |
                  echo "## 📋 Pull Request Validation Summary"
                  echo ""
                  echo "**Latest Tag:** ${{ steps.version_check.outputs.latest_tag }}"
                  echo "**Next Version:** ${{ steps.version_check.outputs.next_version }}"
                  echo ""
                  echo "🎉 **When this PR is merged to master:**"
                  echo "- ✅ All validations will run"
                  echo "- 📝 Manifest.json will be updated to version ${{ steps.version.outputs.manifest_version }}"
                  echo "- 🏷️ Tag ${{ steps.version.outputs.version }} will be created automatically"
                  echo "- 📦 Release workflow will be triggered"
                  echo "- 🚀 GitHub release will be published"
                  echo ""
                  echo "**All Checks:** ✅ Passed"
